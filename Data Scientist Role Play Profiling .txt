Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
	
	SELECT COUNT(*)
	FROM attribute;

ii. Business table = 10,000

	SELECT COUNT(*)
	FROM business;

iii. Category table = 10,000

	SELECT COUNT(*)
	FROM category;

iv. Checkin table = 10,000

	SELECT COUNT(*)
	FROM checkin;

v. elite_years table = 10,000

	SELECT COUNT(*)
	FROM elite_years;

vi. friend table = 10,000

	SELECT COUNT(*)
	FROM friend;

vii. hours table = 10,000

	SELECT COUNT(*)
	FROM hours;

viii. photo table = 10,000

	SELECT COUNT(*)
	FROM photo;

ix. review table = 10,000

	SELECT COUNT(*)
	FROM review;

x. tip table = 10,000

	SELECT COUNT(*)
	FROM tip;

xi. user table = 10,000

	SELECT COUNT(*)
	FROM user;
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business (id) = 10,000

	SELECT COUNT(distinct id)
	FROM business;

ii. Hours (business_id) = 1,562

	SELECT COUNT(distinct business_id)
	FROM hours;

iii. Category (business_id) = 2,643

	SELECT COUNT(distinct business_id)
	FROM category;

iv. Attribute (business_id) = 1,115

	SELECT COUNT(distinct business_id)
	FROM attribute;

v. Review = 10,000 (id) | 8,090 (business_id) | 9,581 (user_id)

	SELECT COUNT(distinct id)
	FROM review;

	SELECT COUNT(distinct business_id)
	FROM review;

	SELECT COUNT(distinct user_id)
	FROM review;

vi. Checkin (business_id) = 493

	SELECT COUNT(distinct business_id)
	FROM checkin;

vii. Photo = 10,000 (id) | 6,493 (business_id)

	SELECT COUNT(distinct id)
	FROM photo;	

	SELECT COUNT(distinct business_id)
	FROM photo;

viii. Tip = 537 (user_id) | 3,979 (business_id)

	SELECT COUNT(distinct user_id)
	FROM tip;

	SELECT COUNT(distinct business_id)
	FROM tip;

ix. User (id) = 10,000

	SELECT COUNT(distinct id)
	FROM user;

x. Friend (user_id) = 11

	SELECT COUNT(distinct user_id)
	FROM friend;

xi. Elite_years (user_id) = 2,780

	SELECT COUNT(distinct user_id)
	FROM elite_years;

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer: 
						SELECT *
						FROM user
						WHERE id IS NULL
    							OR name IS NULL
   							OR review_count IS NULL
   							OR yelping_since IS NULL
   							OR useful IS NULL
   							OR funny IS NULL
   							OR cool IS NULL
   							OR fans IS NULL
   							OR average_stars IS NULL
   							OR compliment_hot IS NULL
							OR compliment_more IS NULL
							OR compliment_profile IS NULL
							OR compliment_cute IS NULL
							OR compliment_list IS NULL
							OR compliment_note IS NULL
							OR compliment_plain IS NULL
							OR compliment_cool IS NULL
							OR compliment_funy IS NULL
							OR compliment_writer IS NULL
							OR compliment_photos IS NULL;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:	3.7082

	SELECT MIN(stars)
	FROM review;

	SELECT MAX(stars)
	FROM review;

	SELECT AVG(stars)
	FROM review;
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg:	3.6549

	SELECT MIN(stars)
	FROM business;

	SELECT MAX(stars)
	FROM business;

	SELECT AVG(stars)
	FROM business;
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144

	SELECT MIN(likes)
	FROM tip;

	SELECT MAX(likes)
	FROM tip;

	SELECT AVG(likes)
	FROM tip;
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	1.9414

	SELECT MIN(count)
	FROM checkin;

	SELECT MAX(count)
	FROM checkin;

	SELECT AVG(count)
	FROM checkin;
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2,000	avg:	24.2995

	SELECT MIN(review_count)
	FROM user;

	SELECT MAX(review_count)
	FROM user;

	SELECT AVG(review_count)
	FROM user;
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city
	,SUM(review_count) AS total_reviews
	FROM business
	GROUP BY city
	ORDER BY total_reviews DESC;
	
	
	Copy and Paste the Result Below:
	
	+-----------------+---------------+
	| city            | total_reviews |
	+-----------------+---------------+
	| Las Vegas       |         82854 |
	| Phoenix         |         34503 |
	| Toronto         |         24113 |
	| Scottsdale      |         20614 |
	| Charlotte       |         12523 |
	| Henderson       |         10871 |
	| Tempe           |         10504 |
	| Pittsburgh      |          9798 |
	| Montréal        |          9448 |
	| Chandler        |          8112 |
	| Mesa            |          6875 |
	| Gilbert         |          6380 |
	| Cleveland       |          5593 |
	| Madison         |          5265 |
	| Glendale        |          4406 |
	| Mississauga     |          3814 |
	| Edinburgh       |          2792 |
	| Peoria          |          2624 |
	| North Las Vegas |          2438 |
	| Markham         |          2352 |
	| Champaign       |          2029 |
	| Stuttgart       |          1849 |
	| Surprise        |          1520 |
	| Lakewood        |          1465 |
	| Goodyear        |          1155 |
	+-----------------+---------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars
	,SUM(review_count) AS star_ratings_distribution
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------+---------------------------+
	| stars | star_ratings_distribution |
	+-------+---------------------------+
	|   1.5 |                        10 |
	|   2.5 |                         6 |
	|   3.5 |                        88 |
	|   4.0 |                        21 |
	|   4.5 |                        31 |
	|   5.0 |                         3 |
	+-------+---------------------------+


ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars
	,SUM(review_count) AS star_ratings_distribution
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------+---------------------------+
	| stars | star_ratings_distribution |
	+-------+---------------------------+
	|   2.0 |                         8 |
	|   2.5 |                         3 |
	|   3.0 |                        11 |
	|   3.5 |                         6 |
	|   4.0 |                        69 |
	|   4.5 |                        17 |
	|   5.0 |                        23 |
	+-------+---------------------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT name
	,SUM(review_count) AS total_reviews
	FROM user
	GROUP BY id
	ORDER BY total_reviews DESC
	LIMIT 3;
	
		
	Copy and Paste the Result Below:
		
	+--------+---------------+
	| name   | total_reviews |
	+--------+---------------+
	| Gerald |          2000 |
	| Sara   |          1629 |
	| Yuri   |          1339 |
	+--------+---------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
No. As we can see in the table below, none of the top 3 users by review count are in the top 3 by fans. The closest one is Gerald at number 4.

	SELECT name
	,review_count
	,SUM(fans) AS total_fans
	FROM user
	GROUP BY id
	ORDER BY total_fans DESC;

	+-----------+--------------+------------+
	| name      | review_count | total_fans |
	+-----------+--------------+------------+
	| Amy       |          609 |        503 |
	| Mimi      |          968 |        497 |
	| Harald    |         1153 |        311 |
	| Gerald    |         2000 |        253 |
	| Christine |          930 |        173 |
	| Lisa      |          813 |        159 |
	| Cat       |          377 |        133 |
	| William   |         1215 |        126 |
	| Fran      |          862 |        124 |
	| Lissa     |          834 |        120 |
	| Mark      |          861 |        115 |
	| Tiffany   |          408 |        111 |
	| bernice   |          255 |        105 |
	| Roanna    |         1039 |        104 |
	| Angela    |          694 |        101 |
	| .Hon      |         1246 |        101 |
	| Ben       |          307 |         96 |
	| Linda     |          584 |         89 |
	| Christina |          842 |         85 |
	| Jessica   |          220 |         84 |
	| Greg      |          408 |         81 |
	| Nieves    |          178 |         80 |
	| Sui       |          754 |         78 |
	| Yuri      |         1339 |         76 |
	| Nicole    |          161 |         73 |
	+-----------+--------------+------------+
	(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	+----------+-------------+
	| feelings | total_count |
	+----------+-------------+
	| others   |        8042 |
	| love     |        1780 |
	| hate     |         178 |
	+----------+-------------+
	
	SQL code used to arrive at answer:

	SELECT feelings,
	COUNT(*) AS total_count
	FROM (SELECT CASE 
    		WHEN text LIKE '%love%' THEN 'love'
    		WHEN text LIKE '%hate%' THEN 'hate'
    		ELSE 'others'
    		END feelings
    		FROM review)
	GROUP BY feelings
	ORDER BY total_count DESC;
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name
	,fans
	FROM user
	GROUP BY id
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I chose "Phoenix" as city and "Food" as category.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Yes, the business with 4-5 rating opens significantly later and closes a couple hours later than the business with 2-3 stars.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
	Yes, the business with 4-5 rating has more than 4 times the reviews than the other.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	The results doesn't explain much based on the location given the fact that we only have 2 businesses. If we judge by the review count, it looks like the postal code 85028 is a busier area for the food industry, therefore the business located in that area understands that it needs to be very customer service-oriented to keep up with the competition. That could explain the higher rating than the business located at postal code 85048. 

SQL code used for analysis:

	SELECT b.name
	,c.category
	,b.city
	,b.postal_code
	,hours
	,CASE
    		WHEN stars BETWEEN 2 AND 3 THEN '2-3 stars'
    		WHEN stars BETWEEN 4 AND 5 THEN '4-5 stars'
    		END AS rating
	,b.review_count AS reviews
	FROM business b
	JOIN hours h ON b.id = h.business_id
	JOIN category c ON c.business_id = b.id
	WHERE city = 'Phoenix' AND category = 'Food' AND rating IN ('2-3 stars','4-5 stars')
	GROUP BY name
	ORDER BY stars DESC;

	+----------------------------------------+----------+---------+-------------+----------------------+-----------+---------+
	| name                                   | category | city    | postal_code | hours                | rating    | reviews |
	+----------------------------------------+----------+---------+-------------+----------------------+-----------+---------+
	| Bootleggers Modern American Smokehouse | Food     | Phoenix | 85028       | Saturday|11:00-22:00 | 4-5 stars |     431 |
	| Starbucks                              | Food     | Phoenix | 85048       | Saturday|5:00-20:00  | 2-3 stars |      52 |
	+----------------------------------------+----------+---------+-------------+----------------------+-----------+---------+


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

	Businesses that are still open have significantly higher review count.         
         
ii. Difference 2:
         
        The average review rating is not significantly higher in the businesses that are still open, which removes any potential assumption that those businesses closed due to poor quality.
         
SQL code used for analysis:

	SELECT CASE
    		WHEN is_open = 1 THEN 'Still Open'
    		WHEN is_open = 0 THEN 'Closed'
    		END status
	,COUNT(distinct id) AS total_companies
	,SUM(review_count) AS total_reviews
	,ROUND(AVG(review_count),2) AS avg_review
	,ROUND(AVG(stars),2) AS avg_rating
	FROM business
	GROUP BY is_open
	ORDER BY status DESC;
	
	+------------+-----------------+---------------+------------+------------+
	| status     | total_companies | total_reviews | avg_review | avg_rating |
	+------------+-----------------+---------------+------------+------------+
	| Still Open |            8480 |        269300 |      31.76 |       3.68 |
	| Closed     |            1520 |         35261 |       23.2 |       3.52 |
	+------------+-----------------+---------------+------------+------------+	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
	I chose to analyze how different cities rate the "Food" category, in an attempt to determine which city has the best food, when measured by average review stars.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
	In order to do this analysis, we are going to need data such as id, stars, city, and review count from the business table and category from the category table. We will need to order by city and determine the average review rating in each city within the food category to see how this category performs from city to city. The number of reviews is important to make sure we have a good sample size and there is no bias in the analysis, therefore we're going to only list the ones that have 10 or more reviews.      
          
iii. Output of your finished dataset:

	+------------+------------+---------------+
	| city       | avg_rating | total_reviews |
	+------------+------------+---------------+
	| Pittsburgh |        4.5 |            72 |
	| Cleveland  |       4.17 |           934 |
	| Middleton  |        4.0 |            37 |
	| Scottsdale |        4.0 |            91 |
	| Tolleson   |        4.0 |            23 |
	| Phoenix    |       3.63 |           501 |
	| Toronto    |       3.63 |            54 |
	| Las Vegas  |       3.25 |            36 |
	+------------+------------+---------------+ 
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT city
	,ROUND(AVG(stars),2) AS avg_rating
	,SUM(review_count) AS total_reviews
	FROM business
	JOIN category ON business.id = category.business_id
	WHERE category = 'Food'
	GROUP BY city
	HAVING total_reviews >= 10
	ORDER BY avg_rating DESC;